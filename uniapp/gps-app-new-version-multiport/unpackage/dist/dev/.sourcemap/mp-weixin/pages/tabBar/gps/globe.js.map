{"version":3,"sources":["webpack:///C:/Users/Dell/Desktop/pool/pool/uniapp/gps-app-new-version-multiport/pages/tabBar/gps/globe.vue?9768","webpack:///C:/Users/Dell/Desktop/pool/pool/uniapp/gps-app-new-version-multiport/pages/tabBar/gps/globe.vue?49b8","uni-app:///main.js","webpack:///C:/Users/Dell/Desktop/pool/pool/uniapp/gps-app-new-version-multiport/pages/tabBar/gps/globe.vue?7251","webpack:///C:/Users/Dell/Desktop/pool/pool/uniapp/gps-app-new-version-multiport/pages/tabBar/gps/globe.vue?58fb","uni-app:///pages/tabBar/gps/globe.vue","webpack:///C:/Users/Dell/Desktop/pool/pool/uniapp/gps-app-new-version-multiport/pages/tabBar/gps/globe.vue?749f","webpack:///C:/Users/Dell/Desktop/pool/pool/uniapp/gps-app-new-version-multiport/pages/tabBar/gps/globe.vue?50a0"],"names":["createPage","Page"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;kDCRA;AACA;AACA,iG;AACAA,UAAU,CAACC,cAAD,CAAV,C;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkR;AAClR;AACyD;AACL;AACc;;;AAGlE;AAC+K;AAC/K,gBAAgB,wLAAU;AAC1B,EAAE,2EAAM;AACR,EAAE,gPAAM;AACR,EAAE,yPAAe;AACjB;AACA;AACA;AACA;AACA;AACA,EAAE,oPAAU;AACZ;AACA;;AAEA;AACe,gF;;;;;;;;;;;;ACvBf;AAAA;AAAA;AAAA;AAAipB,CAAgB,sqBAAG,EAAC,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACsBrqB;AACA,MADA,kBACA;AACA;;AAEA,+CAFA;;;AAKA,GAPA;AAQA,SARA,qBAQA;AACA;AACA,GAVA,E;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAisC,CAAgB,kqCAAG,EAAC,C;;;;;;;;;;;ACArtC;AACA,OAAO,KAAU,EAAE,kBAKd","file":"pages/tabBar/gps/globe.js","sourcesContent":["export * from \"-!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\templateLoader.js??vue-loader-options!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--16-0!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\template.js!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-uni-app-loader\\\\page-meta.js!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./globe.vue?vue&type=template&id=47fee0b0&filter-modules=eyJtYXBCb3giOnsidHlwZSI6InJlbmRlcmpzIiwiY29udGVudCI6IiIsInN0YXJ0IjoxMTQ2LCJhdHRycyI6eyJsYW5nIjoianMiLCJtb2R1bGUiOiJtYXBCb3gifSwiZW5kIjozMzQ3OH19&\"","var components\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import 'uni-pages';\nimport Vue from 'vue'\nimport Page from './pages/tabBar/gps/globe.vue'\ncreatePage(Page)","import { render, staticRenderFns, recyclableRender, components } from \"./globe.vue?vue&type=template&id=47fee0b0&filter-modules=eyJtYXBCb3giOnsidHlwZSI6InJlbmRlcmpzIiwiY29udGVudCI6IiIsInN0YXJ0IjoxMTQ2LCJhdHRycyI6eyJsYW5nIjoianMiLCJtb2R1bGUiOiJtYXBCb3gifSwiZW5kIjozMzQ3OH19&\"\nvar renderjs\nimport script from \"./globe.vue?vue&type=script&lang=js&\"\nexport * from \"./globe.vue?vue&type=script&lang=js&\"\nimport style0 from \"./globe.vue?vue&type=style&index=0&lang=less&\"\n\n\n/* normalize component */\nimport normalizer from \"!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\runtime\\\\componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"pages/tabBar/gps/globe.vue\"\nexport default component.exports","import mod from \"-!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--12-1!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\script.js!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./globe.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--12-1!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\script.js!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./globe.vue?vue&type=script&lang=js&\"","<template>\r\n    <!-- #ifdef APP-PLUS -->\r\n   <view id=\"map-container\" name=\"olmap\" class=\"map-container uni-container\">\r\n        <view class=\"map-tool\">\r\n            <view>\r\n                <view id=\"world_btn\">国家</view>\r\n                <view id=\"china_btn\">省</view>\r\n                <view id=\"province_btn\">市</view>\r\n                <view id=\"city_btn\">县</view>\r\n            </view>\r\n        </view>\r\n        <view id=\"map\" class=\"mapBox\"></view>\r\n    </view>\r\n    <!-- #endif -->\r\n    <!-- #ifdef MP-WEIXIN -->\r\n    <web-view :src='`http://localhost:8082/#/pages/index/index?Cookie=${Cookie}`'></web-view>\r\n    <!-- <map style=\"width: 100%; height: 100%;\" :latitude=\"latitude\" :scale=\"map_level\" :longitude=\"longitude\">\r\n    </map> -->\r\n    <!-- #endif -->\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        data() {\r\n            return {\r\n                // #ifdef MP-WEIXIN\r\n                Cookie: getApp().globalData.header.Cookie,\r\n                // #endif\r\n            }\r\n        },\r\n        mounted() {\r\n            console.log(this.Cookie, '------------2')\r\n        }\r\n    }\r\n</script>\r\n\r\n<script lang=\"renderjs\" module=\"mapBox\">\r\n    import '@/components/ol/ol.css'\r\n    import {\r\n        Map,\r\n        View\r\n    } from '@/components/ol'\r\n    import {\r\n        getCenter\r\n    } from '@/components/ol/extent'\r\n    import mapconfig from './mapconfig'\r\n    import layerconfig from './layerconfig'\r\n    import {\r\n        defaults as defaultControls\r\n    } from '@/components/ol/control.js'\r\n    import VectorSource from '@/components/ol/source/Vector'\r\n    import VectorLayer from '@/components/ol/layer/Vector'\r\n    import Feature from '@/components/ol/Feature'\r\n\r\n    import {\r\n        defaults as defaultInteractions,\r\n        Pointer as PointerInteraction\r\n    } from '@/components/ol/interaction'\r\n\r\n    import {\r\n        Circle as CircleStyle,\r\n        Fill,\r\n        Style,\r\n        Stroke,\r\n        Color,\r\n        Icon,\r\n        Text\r\n    } from '@/components/ol/style.js'\r\n\r\n    import {\r\n        WFS,\r\n        WKT,\r\n        GeoJSON\r\n    } from '@/components/ol/format.js'\r\n\r\n    import mixin from '@/common/mixin.js'\r\n\r\n    /** 使用indexedDB */\r\n    /** 1. 打开数据库 window.indexedDB.open(databaseName, version)*/\r\n    var requestDB = window.indexedDB.open('geomDB', 1)\r\n    /** error事件 */\r\n    requestDB.onerror = function(event) {\r\n        console.log('数据库打开报错')\r\n    }\r\n\r\n    var db\r\n    var objectStore\r\n    var readObj = {\r\n        geom_md5: '',\r\n        geom_txt: ''\r\n    }\r\n    /** success事件 */\r\n    requestDB.onsuccess = function(event) {\r\n        /** 拿到数据库对象 */\r\n        db = requestDB.result\r\n        console.log('数据库打开成功', db)\r\n        if (!db.objectStoreNames.contains('globe_geomDB')) {\r\n            objectStore = db.createObjectStore('globe_geomDB', {\r\n                keyPath: 'id'\r\n            })\r\n            /** 参数分别为 索引名称 / 索引所在的属性 / 配置对象(是否唯一) */\r\n            objectStore.createIndex('geom_md5', 'geom_md5', {\r\n                unique: true\r\n            })\r\n            objectStore.createIndex('geom_txt', 'geom_txt', {\r\n                unique: true\r\n            })\r\n        }\r\n    }\r\n\r\n    /** upgradeneeded 事件 */\r\n    requestDB.onupgradeneeded = function(event) {\r\n        console.log('upgradeneeded 事件')\r\n        db = event.target.result\r\n        /** 判断是否存在 globe_geomDB 表格, 不存在就创建 */\r\n        if (!db.objectStoreNames.contains('globe_geomDB')) {\r\n            objectStore = db.createObjectStore('globe_geomDB', {\r\n                keyPath: 'id'\r\n            })\r\n            /** 参数分别为 索引名称 / 索引所在的属性 / 配置对象(是否唯一) */\r\n            objectStore.createIndex('geom_md5', 'geom_md5', {\r\n                unique: true\r\n            })\r\n            objectStore.createIndex('geom_txt', 'geom_txt', {\r\n                unique: true\r\n            })\r\n        }\r\n    }\r\n\r\n    export default {\r\n        mixins: [mixin],\r\n        data() {\r\n            let img_url = require('./my_icon.png');\r\n            return {\r\n                img_url,\r\n                level: '',\r\n                // txngps002\r\n                locateQueryParams: {\r\n                    input: {\r\n                        longitude: '',\r\n                        latitude: '',\r\n                        region_level: ''\r\n                    }\r\n                },\r\n                timer: null,\r\n                gpsQueryParams: {\r\n                    input: {\r\n                        region_level: ''\r\n                    }\r\n                },\r\n                lastLevel: '',\r\n                res: [{\r\n                        //世界\r\n                        center: [1.5373844923691449, 0.5824610970244106],\r\n                        zoom: 1.0,\r\n                        maxres: 0.2319447499405479,\r\n                        minres: 0.05627038962088\r\n                    },\r\n                    {\r\n                        //省份\r\n                        center: [102.67677456339595, 33.42833563812146],\r\n                        zoom: 3.4233333333333255,\r\n                        maxres: 0.15627038962088,\r\n                        minres: 0.010986328126\r\n                    },\r\n                    {\r\n                        //市\r\n                        center: [102.67677456339595, 33.42833563812146],\r\n                        zoom: 7,\r\n                        maxres: 0.010986328126,\r\n                        minres: 0.00274658203126\r\n                    },\r\n                    {\r\n                        //县\r\n                        center: [102.67677456339595, 33.42833563812146],\r\n                        zoom: 9,\r\n                        maxres: 0.00274658203126,\r\n                        minres: 0\r\n                    }\r\n                ],\r\n                geoserverUrl: 'http://geoserver.tlsk.com.cn/geoserver/',\r\n                map: null,\r\n                view: null,\r\n                basicL: null,\r\n                gpsL: null, //gps个数图层\r\n                curL: null, //当前级别图层\r\n                backL: null, //父背景\r\n                proF: null, //点击的省份feature\r\n                cityF: null, //点击的市\r\n                worldL: null,\r\n                chinaL: null,\r\n                proL: null,\r\n                cityL: null,\r\n                countyL: null,\r\n                basicLayers: [this.worldL, this.proL, this.cityL, this.countyL],\r\n                /** 用于控制 点击事件, 避免上一次点击事件未执行完, 就又开始执行下一次点击事件 */\r\n                state: '',\r\n                /** 给跳转的页面 传递的参数 */\r\n                code: '',\r\n                name: '',\r\n                canNavigateTo: true,\r\n                world_btn: '',\r\n                china_btn: '',\r\n                province_btn: '',\r\n                city_btn: ''\r\n            }\r\n        },\r\n        watch: {\r\n            level: function(val, oldval) {\r\n                this.getGps();\r\n                if (this.timer) {\r\n                    clearInterval(this.timer);\r\n                    this.timer = null\r\n                }\r\n                this.timer = setInterval(() => {\r\n                    this.getGps()\r\n                }, 12000)\r\n            }\r\n        },\r\n        mounted() {\r\n            this.$nextTick(() => {\r\n                this.initMap()\r\n            });\r\n            this.world_btn = document.querySelector('#world_btn')\r\n            this.china_btn = document.querySelector('#china_btn')\r\n            this.province_btn = document.querySelector('#province_btn')\r\n            this.city_btn = document.querySelector('#city_btn')\r\n            this.world_btn.onclick = () => {\r\n\r\n                this.level = '1'\r\n                this.world_btn.classList.add('activebtn')\r\n                this.china_btn.classList.remove('activebtn')\r\n                this.province_btn.classList.remove('activebtn')\r\n                this.city_btn.classList.remove('activebtn')\r\n                this.change_level('1')\r\n                console.log(this.world_btn.classList.contains('activebtn'));\r\n            }\r\n\r\n            this.china_btn.onclick = () => {\r\n                this.level = '2'\r\n                this.world_btn.classList.remove('activebtn')\r\n                this.china_btn.classList.add('activebtn')\r\n                this.province_btn.classList.remove('activebtn')\r\n                this.city_btn.classList.remove('activebtn')\r\n                this.change_level('2')\r\n            }\r\n            document.querySelector('#province_btn').onclick = () => {\r\n                this.level = '3'\r\n                this.world_btn.classList.remove('activebtn')\r\n                this.china_btn.classList.remove('activebtn')\r\n                this.province_btn.classList.add('activebtn')\r\n                this.city_btn.classList.remove('activebtn')\r\n                this.change_level('3')\r\n            }\r\n            document.querySelector('#city_btn').onclick = () => {\r\n                this.level = '4'\r\n                this.world_btn.classList.remove('activebtn')\r\n                this.china_btn.classList.remove('activebtn')\r\n                this.province_btn.classList.remove('activebtn')\r\n                this.city_btn.classList.add('activebtn')\r\n                this.change_level('4')\r\n            }\r\n        },\r\n        methods: {\r\n            getGps() {\r\n                this.gpsQueryParams.input.region_level = parseInt(this.level);\r\n                var xhr = new XMLHttpRequest();\r\n                xhr.open('POST', `${this.api}txngpsp00.ajson`);\r\n                xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n                let msg =\r\n                    `input:region_level=${this.gpsQueryParams.input.region_level}`\r\n                xhr.send(msg);\r\n                xhr.onreadystatechange = () => {\r\n                    if (xhr.readyState === 4 && xhr.status === 200) {\r\n                        var datas = JSON.parse(xhr.responseText);\r\n                        if (datas.error_code === '000000') {\r\n                            this.gpsCount(datas.region)\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            onContextmenu(event, ownerInstance) {\r\n                let timer = setInterval(() => {\r\n                    if (this.state == '') {\r\n                        ownerInstance.callMethod('getNavigatePageData', {\r\n                            name: this.name,\r\n                            code: this.code,\r\n                            level: this.level,\r\n                            canNavigateTo: this.canNavigateTo\r\n                        })\r\n                        clearInterval(timer)\r\n                    }\r\n                }, 100)\r\n            },\r\n            /** 向indexDB中 新增数据 */\r\n            addInformation(code, md5, txt) {\r\n                var request = db.transaction(['globe_geomDB'], 'readwrite')\r\n                    /** 得到表格对象 */\r\n                    .objectStore('globe_geomDB')\r\n                    .add({\r\n                        id: code,\r\n                        geom_md5: md5,\r\n                        geom_txt: txt\r\n                    })\r\n\r\n                request.onsuccess = function(event) {\r\n                    console.log('数据写入成功')\r\n                }\r\n\r\n                request.onerror = function(event) {\r\n                    console.log('数据写入失败')\r\n                }\r\n            },\r\n            /** 读取 indexDB 中的数据 */\r\n            readInformation(code, data) {\r\n                let _this = this\r\n                var transaction = db.transaction(['globe_geomDB'])\r\n                var objectStore = transaction.objectStore('globe_geomDB')\r\n                /** 通过主键读取数据 */\r\n                var request = objectStore.get(code)\r\n\r\n                request.onerror = function(event) {\r\n                    console.log('事务失败')\r\n                }\r\n                request.onsuccess = (event) => {\r\n                    plus.nativeUI.closeWaiting();\r\n                    if (request.result) {\r\n                        console.log('geom_md5: ' + code, request.result.geom_md5)\r\n                        // console.log('geom_txt: ' + code,  request.result.geom_txt)\r\n                        if (data.geom_md5 === request.result.geom_md5) {\r\n                            /** 如果缓存中有当前地区的边界数据 */\r\n                            if (request.result.geom_txt) {\r\n                                let geom = new WKT().readGeometry(request.result.geom_txt)\r\n                                let f = new Feature({\r\n                                    geometry: geom\r\n                                })\r\n                                this.backL.getSource().addFeature(f)\r\n                                let maxres = this.res[parseInt(this.level)].maxres\r\n                                let _a = maxres.toString()\r\n                                let _b = parseFloat(_a.substring(0, _a.length - 1))\r\n                                this.view.setCenter(getCenter(geom.getExtent()))\r\n                                this.view.setResolution(_b)\r\n\r\n                                /** 处理完毕, 重新设置state 为 '', 以便下一次的点击事件能够触发 */\r\n                                this.state = ''\r\n\r\n                                this.level = parseInt(this.level) + 1 + ''\r\n                                if (this.level == '3') {\r\n                                    this.world_btn.classList.remove('activebtn')\r\n                                    this.china_btn.classList.remove('activebtn')\r\n                                    this.province_btn.classList.add('activebtn')\r\n                                    this.city_btn.classList.remove('activebtn')\r\n                                } else if (this.level == '4') {\r\n                                    this.world_btn.classList.remove('activebtn')\r\n                                    this.china_btn.classList.remove('activebtn')\r\n                                    this.province_btn.classList.remove('activebtn')\r\n                                    this.city_btn.classList.add('activebtn')\r\n                                }\r\n                            } else {\r\n                                /** 如果缓存中没有txt 或者 md5不相同, 调用002 */\r\n                                console.log('222')\r\n                                this.getGeom_text(request.result.geom_md5, request.result.geom_txt)\r\n                            }\r\n                        } else {\r\n                            console.log('333')\r\n                            /** 如果缓存中的md5与001返回的不相同 或者 没有对应code 的 md5, 调用002 */\r\n                            this.getGeom_text(request.result.geom_md5, request.result.geom_txt)\r\n                        }\r\n                    } else {\r\n                        console.log('未获得数据记录')\r\n                        this.getGeom_text()\r\n                    }\r\n                }\r\n            },\r\n            /** 更新修改 indexDB 中的数据 */\r\n            updateInformation(code, md5, txt) {\r\n                var request = db.transaction(['globe_geomDB'], 'readwrite')\r\n                    .objectStore('globe_geomDB')\r\n                    .put({\r\n                        id: code,\r\n                        geom_md5: md5,\r\n                        geom_txt: txt\r\n                    })\r\n\r\n                request.onsuccess = function(event) {\r\n                    console.log('数据更新成功')\r\n                }\r\n\r\n                request.onerror = function(event) {\r\n                    console.log('数据更新失败')\r\n                }\r\n            },\r\n            /** 调用txngps002: 获取边界数据 */\r\n            getGeom_text(md5, txt) {\r\n                var xhr = new XMLHttpRequest();\r\n                xhr.open('POST', `${this.api}txngps002.ajson`);\r\n                xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n                let msg =\r\n                    `input:longitude=${this.locateQueryParams.input.longitude}&input:latitude=${this.locateQueryParams.input.latitude}&input:region_level=${this.locateQueryParams.input.region_level}`\r\n                xhr.send(msg);\r\n                xhr.onreadystatechange = () => {\r\n                    if (xhr.readyState === 4 && xhr.status === 200) {\r\n                        var datas = JSON.parse(xhr.responseText);\r\n                        let data = datas.region[0];\r\n                        // uni.hideLoading()\r\n                        if (data.code) {\r\n                            this.name = data.name;\r\n                            this.code = data.code;\r\n\r\n                            if (md5) {\r\n                                /** 需要修改 并 存储在 indexDB中 */\r\n                                this.updateInformation(data.code, data.geom_md5, data.geom_txt)\r\n                            } else {\r\n                                /** 添加存储在 indexDB中 */\r\n                                this.addInformation(data.code, data.geom_md5, data.geom_txt)\r\n                            }\r\n\r\n                            let geom = new WKT().readGeometry(data.geom_txt)\r\n                            let f = new Feature({\r\n                                geometry: geom\r\n                            })\r\n                            this.backL.getSource().addFeature(f)\r\n                            this.view.fit(geom)\r\n\r\n                            /** 处理完毕, 重新设置state 为 '', 以便下一次的点击事件能够触发 */\r\n                            this.state = ''\r\n                        } else {\r\n                            plus.nativeUI.toast('当前点击的是无效区域')\r\n                            /** 处理完毕, 重新设置state 为 '', 以便下一次的点击事件能够触发 */\r\n                            this.state = ''\r\n                        }\r\n                    } else {\r\n                        /** 处理完毕, 重新设置state 为 '', 以便下一次的点击事件能够触发 */\r\n                        this.state = ''\r\n                    }\r\n                }\r\n            },\r\n            \r\n            /** 点击(单击)事件处理程序 */\r\n            identify(evt) {\r\n                // 调用nativeUI的 关闭系统等待对话框方法\r\n                plus.nativeUI.closeWaiting();\r\n                this.backL.getSource().clear();\r\n                // 调用显示系统等待对话框方法\r\n                plus.nativeUI.showWaiting();\r\n                /** 设置控制点击事件的 state 为 pending, 当下次点击时, 如果 state的值 仍为pending, 阻止事件的触发 */\r\n                this.state = 'pending';\r\n                this.locateQueryParams.input.longitude = evt.coordinate[0];\r\n                this.locateQueryParams.input.latitude = evt.coordinate[1];\r\n                this.locateQueryParams.input.region_level = this.level;\r\n\r\n                /** 先调用001,查看geom_md5, 如果md5跟缓存的md5相同, 查看本地的边界数据, 如果没有md5 或者不同, 调002 */\r\n                var xhr = new XMLHttpRequest();\r\n                xhr.open('POST', `${this.api}txngps001.ajson`);\r\n                xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n                let msg =\r\n                    `input:longitude=${this.locateQueryParams.input.longitude}&input:latitude=${this.locateQueryParams.input.latitude}&input:region_level=${this.locateQueryParams.input.region_level}`\r\n                xhr.send(msg);\r\n                xhr.onreadystatechange = () => {\r\n                    if (xhr.readyState === 4 && xhr.status === 200) {\r\n                        var datas = JSON.parse(xhr.responseText);\r\n                        if (datas.error_code === '000000') {\r\n                            let data = datas.region[0];\r\n                            this.readInformation(data.code, data)\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            /** 得到聚合 车辆数量 */\r\n            gpsCount(data) {\r\n                if (!data || data.length == 0) {\r\n                    this.curL.getSource().clear();\r\n                    this.gpsL.getSource().clear();\r\n                    return\r\n                }\r\n                if (this.lastLevel == this.level) {\r\n                    let fs = [];\r\n                    let features = this.gpsL.getSource().getFeatures();\r\n\r\n                    features.forEach(f => {\r\n                        //清除原来有 现在没有数据的\r\n                        if (\r\n                            !data.some(d => {\r\n                                return d.code == f.getId()\r\n                            })\r\n                        ) {\r\n                            this.gpsL.getSource().removeFeature(f)\r\n                        }\r\n                    });\r\n                    data.forEach((item) => {\r\n                        let f = this.gpsL.getSource().getFeatureById(item.code);\r\n                        if (f) {\r\n                            f.set('count', item.count)\r\n                        } else {\r\n                            let count = item.count;\r\n                            let geom = new WKT().readGeometry(item.center);\r\n                            let f = new Feature({\r\n                                geometry: geom,\r\n                                count: count\r\n                            });\r\n                            f.setId(item.code);\r\n                            fs.push(f)\r\n                        }\r\n                    });\r\n                    this.gpsL.getSource().addFeatures(fs)\r\n                } else {\r\n                    this.curL.getSource().clear();\r\n                    this.gpsL.getSource().clear();\r\n                    let fs = [];\r\n\r\n                    data.forEach(function(item) {\r\n                        let count = item.count\r\n                        let geom = new WKT().readGeometry(item.center);\r\n                        let f = new Feature({\r\n                            geometry: geom,\r\n                            count: count\r\n                        });\r\n                        f.setId(item.code);\r\n                        fs.push(f)\r\n                    });\r\n                    this.gpsL.getSource().addFeatures(fs)\r\n                }\r\n            },\r\n            change_level(l) {\r\n                this.backL.getSource().clear();\r\n                let oldval = l\r\n                // if (oldval == '1') {\r\n                //     this.res[2].center = this.res[3].center = this.res[0].center\r\n                // } else {\r\n                //     this.res[2].center = this.res[3].center = this.view.getCenter()\r\n                // }\r\n                switch (l) {\r\n                    case '1': //世界\r\n                        this.view.animate({\r\n                            center: this.res[0].center,\r\n                            zoom: this.res[0].zoom,\r\n                            duration: 500\r\n                        });\r\n                        break;\r\n                    case '2': //省\r\n                        this.view.animate({\r\n                            center: this.res[1].center,\r\n                            zoom: this.res[1].zoom,\r\n                            duration: 500\r\n                        });\r\n                        break;\r\n                    case '3': //市\r\n                        this.view.animate({\r\n                            center: this.res[2].center,\r\n                            zoom: this.res[2].zoom,\r\n                            duration: 500\r\n                        });\r\n                        break;\r\n                    case '4': //县\r\n                        this.view.animate({\r\n                            center: this.res[3].center,\r\n                            zoom: this.res[3].zoom,\r\n                            duration: 500\r\n                        });\r\n                        break;\r\n                    default:\r\n                        break\r\n                }\r\n                this.level = l;\r\n            },\r\n            /** 地图初始化 */\r\n            initMap() {\r\n                /** 地图容器 */\r\n                let mapcontainer = document.querySelector(\"#map\");\r\n                this.view = new View({\r\n                    projection: mapconfig.getPro(),\r\n                    center: this.res[0].center,\r\n                    zoom: this.res[0].zoom,\r\n                    minZoom: this.res[0].zoom\r\n                });\r\n                let dzL = mapconfig.streetmap(0);\r\n                let dzLabel = mapconfig.streetmap(2);\r\n                /** 世界图层 */\r\n                this.worldL = layerconfig.getLayer({\r\n                    serviceUrl: this.geoserverUrl + 'world/wms',\r\n                    type: 'tilewms',\r\n                    layers: 'world:world',\r\n                    visible: true\r\n                });\r\n                /** china 中国图层 */\r\n                this.chinaL = layerconfig.getLayer({\r\n                    serviceUrl: this.geoserverUrl + 'world/wms',\r\n                    type: 'tilewms',\r\n                    layers: 'world:china',\r\n                    visible: true\r\n                });\r\n                /** china 中国省份 */\r\n                this.proL = layerconfig.getLayer({\r\n                    serviceUrl: this.geoserverUrl + 'world/wms',\r\n                    type: 'tilewms',\r\n                    layers: 'world:province',\r\n                    visible: true,\r\n                    min: this.res[1].minres,\r\n                    max: this.res[1].maxres\r\n                });\r\n                /** 市图层 */\r\n                this.cityL = layerconfig.getLayer({\r\n                    serviceUrl: this.geoserverUrl + 'world/wms',\r\n                    type: 'tilewms',\r\n                    layers: 'world:city',\r\n                    visible: true,\r\n                    min: this.res[2].minres,\r\n                    max: this.res[2].maxres\r\n                });\r\n                /** 县图层 */\r\n                this.countyL = layerconfig.getLayer({\r\n                    serviceUrl: this.geoserverUrl + 'world/wms',\r\n                    type: 'tilewms',\r\n                    layers: 'world:county',\r\n                    visible: true,\r\n                    min: this.res[3].minres,\r\n                    max: this.res[3].maxres\r\n                });\r\n                /** 聚合图标的配置 */\r\n                this.gpsL = new VectorLayer({\r\n                    source: new VectorSource(),\r\n                    id: 'gpsLayer',\r\n                    style: (f, r) => {\r\n                        let property = f.getProperties();\r\n                        let count = property.count;\r\n                        return new Style({\r\n                            image: new CircleStyle({\r\n                                radius: count > 999 ? 16 : 12,\r\n                                /** 聚合图标 圆圈的填充颜色 */\r\n                                fill: new Fill({\r\n                                    color: '#fa605a'\r\n                                }),\r\n                                /** 圆圈 线的颜色 */\r\n                                stroke: new Stroke({\r\n                                    color: '#2b3561',\r\n                                    width: 3\r\n                                })\r\n                            }),\r\n                            // image: new Icon({\r\n                            //     anchor: [0.55, 0.4],\r\n                            //     src: this.img_url,\r\n                            //     // src: require('./my_icon.png'),\r\n                            //     rotateWithView: false,\r\n                            //     // rotation: 0,\r\n                            //     scale: count > 999 ? 2.0 : 1.6,\r\n                            // }),\r\n                            /** 聚合图标 文字配置 */\r\n                            text: new Text({\r\n                                font: '12px 微软雅黑',\r\n                                text: count.toString(),\r\n                                fill: new Fill({\r\n                                    color: '#fff0c3'\r\n                                })\r\n                            })\r\n                        })\r\n                    }\r\n                });\r\n                this.curL = new VectorLayer({\r\n                    source: new VectorSource(),\r\n                    style: (f, r) => {\r\n                        let property = f.getProperties();\r\n                        let label = property.name;\r\n                        if (!label) {\r\n                            label = property.COUNTRY\r\n                        }\r\n                        let fillC = '#f6f6f6'; // cols[Math.floor(Math.random() * 4)];\r\n                        return new Style({\r\n                            stroke: new Stroke({\r\n                                color: '#c5bfe8',\r\n                                width: 2\r\n                            }),\r\n                            fill: new Fill({\r\n                                color: fillC\r\n                            }),\r\n                            text: new Text({\r\n                                font: '12px 微软雅黑',\r\n                                text: label ? label : ''\r\n                            })\r\n                        })\r\n                    },\r\n                    name: '当前图层',\r\n                    id: 'curLayer'\r\n                });\r\n                this.backL = new VectorLayer({\r\n                    source: new VectorSource(),\r\n                    style: (f, r) => {\r\n                        let strokeC = '#f6f6f6';\r\n                        let strokeW = 1;\r\n                        if (this.level == '1') {\r\n                            strokeC = '#373892';\r\n                            strokeW = 2\r\n                        } else if (this.level == '2') {\r\n                            strokeC = '#f9ba84';\r\n                            strokeW = 2\r\n                        } else if (this.level == '3') {\r\n                            strokeC = '#6daaf9';\r\n                            strokeW = 2\r\n                        }\r\n                        strokeC = '#373892';\r\n                        strokeW = 3\r\n                        return new Style({\r\n                            stroke: new Stroke({\r\n                                color: strokeC,\r\n                                width: strokeW\r\n                            }),\r\n                            fill: new Fill({\r\n                                color: 'rgba(0,0,0,0)'\r\n                            })\r\n                        })\r\n                    }\r\n                });\r\n                /** 创建Map 实例对象 */\r\n                this.map = new Map({\r\n                    /** 地图容器 */\r\n                    target: mapcontainer,\r\n                    /** 地图控件 */\r\n                    controls: defaultControls({\r\n                        attribution: false,\r\n                        zoom: false\r\n                    }).extend(\r\n                        []\r\n                    ),\r\n                    interactions: defaultInteractions({\r\n                        doubleClickZoom: false,\r\n                        // mouseWheelZoom: false,\r\n                        shiftDragZoom: false,\r\n                        // dragPan: false,\r\n                        altShiftDragRotate: false,\r\n                        pinchRotate: false, // 禁用手指进行旋转, 针对触摸屏\r\n                        // pinchZoom: false // 手指进行缩放, 针对触摸屏 \r\n                    }),\r\n                    /** 图层 */\r\n                    layers: [\r\n                        dzL,\r\n                        this.worldL,\r\n                        this.proL,\r\n                        this.cityL,\r\n                        this.countyL,\r\n                        this.chinaL,\r\n                        this.backL,\r\n                        this.curL,\r\n                        this.gpsL\r\n                    ],\r\n                    view: this.view\r\n                });\r\n                /** 单击事件, 通过state 来控制事件, 避免事件重复触发执行 */\r\n                this.map.on('click', evt => {\r\n                    if (this.state == 'pending') {\r\n                        return\r\n                    }\r\n                    if (this.level == '1' || this.level == '4') return\r\n\r\n                    this.identify(evt)\r\n                });\r\n\r\n                this.view.on('change:resolution', e => {\r\n                    if (this.state) return\r\n                    let res = e.target.getResolution()\r\n                    this.res.forEach((item, index) => {\r\n                        if (res > item.minres && res < item.maxres && parseInt(this.level) != index + 1) {\r\n                            this.level = (index + 1).toString()\r\n                            if (this.level == '1') {\r\n                                this.world_btn.classList.add('activebtn')\r\n                                this.china_btn.classList.remove('activebtn')\r\n                                this.province_btn.classList.remove('activebtn')\r\n                                this.city_btn.classList.remove('activebtn')\r\n                            } else if (this.level == '2') {\r\n                                this.world_btn.classList.remove('activebtn')\r\n                                this.china_btn.classList.add('activebtn')\r\n                                this.province_btn.classList.remove('activebtn')\r\n                                this.city_btn.classList.remove('activebtn')\r\n                            } else if (this.level == '3') {\r\n                                this.world_btn.classList.remove('activebtn')\r\n                                this.china_btn.classList.remove('activebtn')\r\n                                this.province_btn.classList.add('activebtn')\r\n                                this.city_btn.classList.remove('activebtn')\r\n                            } else if (this.level == '4') {\r\n                                this.world_btn.classList.remove('activebtn')\r\n                                this.china_btn.classList.remove('activebtn')\r\n                                this.province_btn.classList.remove('activebtn')\r\n                                this.city_btn.classList.add('activebtn')\r\n                            }\r\n                        }\r\n                    })\r\n                });\r\n                window.map = this.map;\r\n                /** 设置图层 */\r\n                this.china_btn.click();\r\n                /** 地图自适应??? */\r\n                this.map.updateSize()\r\n            }\r\n        },\r\n        \r\n        destroyed() {\r\n            console.log(this.timer);\r\n            clearInterval(this.timer);\r\n        }\r\n    }\r\n</script>\r\n<style lang=\"less\">\r\n    @import '../../../common/uni-nvue.css';\r\n\r\n    #map-container {\r\n        width: 100%;\r\n        height: 100%;\r\n        position: relative;\r\n        padding: 0;\r\n\r\n        #map {\r\n            width: 100%;\r\n            height: 100%;\r\n        }\r\n\r\n        // 右上角 层级按钮\r\n        .activebtn {\r\n            background-color: #00a0e8 !important;\r\n            color: #fff;\r\n        }\r\n\r\n        .map-tool {\r\n            position: absolute;\r\n            bottom: 80rpx;\r\n            right: 10rpx;\r\n            z-index: 1;\r\n\r\n            view {\r\n\r\n                view {\r\n                    width: 84rpx !important;\r\n                    height: 48rpx !important;\r\n                    line-height: 48rpx;\r\n                    font-size: 24rpx;\r\n                    text-align: center;\r\n                    border: 1px solid #fff;\r\n                    background-color: #ccc;\r\n                }\r\n            }\r\n        }\r\n\r\n        .uni-tip {\r\n            width: 660rpx;\r\n            padding: 30rpx 20rpx;\r\n            background: #fff;\r\n            box-sizing: border-box;\r\n            border-radius: 20rpx;\r\n\r\n            .uni-tip-title {\r\n                color: #333;\r\n                text-align: center;\r\n                font-weight: bold;\r\n                font-size: 32rpx;\r\n            }\r\n\r\n            .uni-tip-content {\r\n                padding: 30rpx;\r\n                color: #666;\r\n                font-size: 28rpx;\r\n                text-align: center;\r\n            }\r\n\r\n            .uni-tip-group-button {\r\n                display: flex;\r\n                margin-top: 20rpx;\r\n\r\n                .uni-tip-button {\r\n                    width: 100%;\r\n                    color: #3b4144;\r\n                    text-align: center;\r\n                    font-size: 28rpx;\r\n                    font-weight: 600;\r\n                }\r\n\r\n                view:nth-child(2) {\r\n                    color: #dc1110;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\n","import mod from \"-!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\mini-css-extract-plugin\\\\dist\\\\loader.js??ref--10-oneOf-1-0!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js??ref--10-oneOf-1-1!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\stylePostLoader.js!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--10-oneOf-1-2!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\postcss-loader\\\\src\\\\index.js??ref--10-oneOf-1-3!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\less-loader\\\\dist\\\\cjs.js??ref--10-oneOf-1-4!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--10-oneOf-1-5!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./globe.vue?vue&type=style&index=0&lang=less&\"; export default mod; export * from \"-!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\mini-css-extract-plugin\\\\dist\\\\loader.js??ref--10-oneOf-1-0!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js??ref--10-oneOf-1-1!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\stylePostLoader.js!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--10-oneOf-1-2!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\postcss-loader\\\\src\\\\index.js??ref--10-oneOf-1-3!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\less-loader\\\\dist\\\\cjs.js??ref--10-oneOf-1-4!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--10-oneOf-1-5!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\HBuilder\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./globe.vue?vue&type=style&index=0&lang=less&\"","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1614569220247\n      var cssReload = require(\"D:/HBuilder/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"hmr\":true,\"publicPath\":\"../../\",\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"sourceRoot":""}